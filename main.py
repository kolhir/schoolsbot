import telebot, config, time, random,copy
import func as f
from somewhere import admins
stat = copy.deepcopy(config.stat_update)
token = config.token
bot = telebot.TeleBot(token, threaded=False)
# bot = telebot.TeleBot(token)
weekdays=("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
def stat_on_day(message,flag):
    global stat
    try:
        if len(flag) == 2:
            if not(message.from_user.id in stat["school"][flag[0]][flag[1]]):
                stat["school"][flag[0]][flag[1]].append(message.from_user.id)

    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 1 ", e)

    if (message.text in config.list_command) or (message.text in weekdays):
        try:
            stat[message.text]
        except Exception as e:
            stat[message.text] = []
        if not(message.from_user.id in stat[message.text]):
            stat[message.text].append(message.from_user.id)
    else:
        try:
            dv = {message.text:message.from_user.id}
            stat["not_know"].update(dv)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 2 ", e)

def rand_quote(message):
    rand = (random.randint(0,37))
    # if  (0 < rand <= 37):
    quote = config.quote[rand]
    timenow = time.strftime("%X", time.localtime())
    k = message.from_user
    l = f.whoIsHe(k.id)
    print("–í—ã–≤–æ–¥")
    if(len(l) == 2):
        print("–®–∫–æ–ª–∞: ",l[0], "; –ö–ª–∞—Å—Å: ", l[1], "; –í—Ä–µ–º—è: ", timenow, sep = "")
    print(k.id, ";  –ò–º—è: ", k.first_name, ";  –§–∞–º–∏–ª–∏—è: ", k.last_name, "; User_name: ", k.username, "\n", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞:", quote , "\n", sep = "")
    bot.send_message(message.from_user.id, quote , start_murkup())

def my_send_message(userid, string, user_markup, message):
    l = f.whoIsHe(userid)
    timenow = time.strftime("%X", time.localtime())
    k = message.from_user
    print("–í—ã–≤–æ–¥")
    if(len(l) == 2):
        print("–®–∫–æ–ª–∞: ",l[0], "; –ö–ª–∞—Å—Å: ", l[1], "; –í—Ä–µ–º—è: ", timenow, sep = "")
    print(k.id, ";  –ò–º—è: ", k.first_name, ";  –§–∞–º–∏–ª–∏—è: ", k.last_name, "; User_name: ", k.username, "\n", "–°–æ–æ–±—â–µ–Ω–∏–µ: ", string, "\n", sep = "")
    return (bot.send_message(userid, string, reply_markup = user_markup))

def my_send_message_WK(userid, string, message):
    k = message.from_user
    l = f.whoIsHe(userid)
    timenow = time.strftime("%X", time.localtime())
    k = message.from_user
    print("–í—ã–≤–æ–¥")
    if(len(l) == 2):
        print("–®–∫–æ–ª–∞: ",l[0], "–ö–ª–∞—Å—Å: ", l[1], "–í—Ä–µ–º—è: ", timenow, sep = "")
    print(k.id, "; –ò–º—è: ", k.first_name, "; –§–∞–º–∏–ª–∏—è: ", k.last_name, "; User_name: ", k.username, "\n", "–°–æ–æ–±—â–µ–Ω–∏–µ: ", string, "\n", sep = "")
    return (bot.send_message(userid, string))

def start_murkup():
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row('–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫')
    user_markup.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å')
    user_markup.row('–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∑–≤–æ–Ω–∫–∞?')
    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å')
    return user_markup

def choose_school(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    for i in f.schools:
        user_markup.row(i[1:])
    user_school = my_send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ —à–∫–æ–ª—É", user_markup, message)

def choose_klass(message):
    l = f.whoIsHe(message.from_user.id)
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    if (len(l) == 1):
        for i in f.vlz_dict[l[0]]:
            user_markup.row(i)
    user_markup.row("–ò–∑–º–µ–Ω–∏—Ç—å —à–∫–æ–ª—É")
    user_klass = my_send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å", user_markup, message)

def start(message):
    my_send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ",  start_murkup(), message)

def ttOnDay(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ß–µ—Ç–≤–µ—Ä–≥')
    user_markup.row('–í—Ç–æ—Ä–Ω–∏–∫', '–ü—è—Ç–Ω–∏—Ü–∞')
    user_markup.row('–°—Ä–µ–¥–∞', '–°—É–±–±–æ—Ç–∞')
    day = my_send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å", user_markup, message)
    bot.register_next_step_handler(day, onDay)

def change_smt(message):
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å')
    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —à–∫–æ–ª—É')
    my_send_message(message.from_user.id, "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", user_markup, message)

def nextLesson(message):
    answer = f.nextLesson(f.whoIsHe(message.from_user.id))
    if answer == "":
        rand_quote(message)
    else:
        my_send_message(message.from_user.id, answer, start_murkup(), message)###–ü–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞—Å—Å —á–µ–ª–æ–≤–µ–∫–∞
        if answer in config.not_lesson:
            rand_quote(message)

def untilTheEnd(message):
    answer =  f.untilTheEnd(f.whoIsHe(message.from_user.id))
    if answer == "":
        rand_quote(message)
    else:
        my_send_message(message.from_user.id, answer, start_murkup() ,message)###–ü–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞—Å—Å —á–µ–ª–æ–≤–µ–∫–∞
        if answer in config.not_lesson:
            rand_quote(message)

@bot.message_handler(commands=['start'])
def handle_start(message):
    flag = f.whoIsHe(message.from_user.id)
    stat_on_day(message,flag)
    if not(flag):
        choose_school(message)
    else:
        start(message)

@bot.message_handler(commands=['stat'])
def handle_stat(message):
    if message.from_user.id in admins:
        s = ""
        k = []
        for i in stat["school"].keys():
            for ii in stat["school"][i]:
                s = s + (i + " : " + ii + " : " + str(len(stat["school"][i][ii])) + "\n")
                k = k + stat["school"][i][ii]
        all_users = []
        for i in k:
            if not(i in all_users):
                all_users.append(i)
        s = s + ("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(len(all_users)) + "\n")
        for i in list(stat.keys())[1:]:
            s = s + (i + " : " + str(len(stat[i])) + "\n")
        bot.send_message(message.from_user.id, s)

    else:
        s = "–ö–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ –∞–¥–º–∏–Ω üò±"
        bot.my_send_message(message.from_user.id, s, start_murkup(), message)

@bot.message_handler(commands=['notknow'])
def handle_notknow(message):
    if message.from_user.id in admins:
        s = ""
        for i in stat["not_know"]:
            s = s + (str(i) + " : " + str(stat["not_know"][i]) + "\n")
        bot.send_message(message.from_user.id, s)
    else:
        s = "–ö–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ –∞–¥–º–∏–Ω üò±"
        bot.my_send_message(message.from_user.id, s, start_murkup(), message)

@bot.message_handler(commands=['statupdate'])
def handle_statupdate(message):
    if message.from_user.id in admins:
        global stat
        stat =copy.deepcopy(config.stat_update)
        s = "–ì–æ—Ç–æ–≤–æ"
        bot.send_message(message.from_user.id, s)
    else:
        s = "–ö–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ –∞–¥–º–∏–Ω üò±"
        bot.my_send_message(message.from_user.id, s, start_murkup(), message)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    l = f.whoIsHe(message.from_user.id)
    timenow = time.strftime("%X", time.localtime())
    k = message.from_user
    stat_on_day(message,l)
    print("–í–≤–æ–¥")
    if(len(l) == 2):
        print("–®–∫–æ–ª–∞: ",l[0], "; –ö–ª–∞—Å—Å: ", l[1], "; –í—Ä–µ–º—è: ", timenow, sep = "")
    elif(len(l) == 1):
        print("–®–∫–æ–ª–∞: ",l[0], "; –í—Ä–µ–º—è: ", timenow, sep = "")
    print(k.id, ";  –ò–º—è: ", k.first_name, ";  –§–∞–º–∏–ª–∏—è: ", k.last_name, "; User_name: ", k.username, "\n", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", message.text, "\n", sep = "")

    if len(l) == 2:
        if message.text == "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫":
            nextLesson(message)
        elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å":
            ttOnDay(message)
        elif message.text == "–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∑–≤–æ–Ω–∫–∞?":
            untilTheEnd(message)
        elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å":
            change_smt(message)
        elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å":
            f.deleteUserFromKlass(message.from_user.id)
            choose_klass(message)
        elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —à–∫–æ–ª—É":
            f.deleteUser(message.from_user.id)
            choose_school(message)
        else: start(message)
    elif (len(l) == 1) and (message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —à–∫–æ–ª—É"):
        f.deleteUser(message.from_user.id)
        choose_school(message)
    elif ("s"+message.text) in f.schools:
        message.text = "s" + message.text
        if len(l) == 0:
            f.addInSchool(message.from_user.id, message.text)
            choose_klass(message)
        elif len(l) == 1:
            choose_klass(message)
        else:
            start(message)

    elif message.text in f.klases:
        if len(l) == 0:
            choose_school(message)
        elif len(l) == 1:
            f.addUser(message.from_user.id, message.text, l[0])
        start(message)
    elif len(l) == 1:
        choose_klass(message)
    else:
        choose_school(message)

def onDay(message):
    stat_on_day(message,f.whoIsHe(message.from_user.id))
    if message.text in weekdays:
        print(message.text)
        answer = f.onDay(message.text, f.whoIsHe(message.from_user.id))
        if answer == "":
            rand_quote(message)
        else:
            my_send_message(message.from_user.id, answer, start_murkup(), message)###–ü–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞—Å—Å —á–µ–ª–æ–≤–µ–∫–∞
            if answer in config.not_lesson:
                rand_quote(message)
    elif message.text == "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫":
        nextLesson(message)
    else: ttOnDay(message)
while True:

    try:
        bot.polling(none_stop=True)

    except Exception as e:
        print("–û—à–∏–±–∫–∞: ",e)
        import traceback; traceback.print_exc()  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ print(e) –µ—Å–ª–∏ —É –≤–∞—Å –ª–æ–≥–≥–µ—Ä–∞ –Ω–µ—Ç,
        # –∏–ª–∏ import traceback; traceback.print_exc() –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—ã
        time.sleep(15)
